name: 🏭 Build

on:
  push:
    branches:
    - main
    - validate/*
  pull_request:
  workflow_dispatch:

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  BUILDCONFIGURATION: Release
  # codecov_token: 4dc9e7e2-6b01-4932-a180-847b52b43d35 # Get a new one from https://codecov.io/
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages/

jobs:
  build:
    name: 🏭 Build

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-22.04
        - macos-14
        - windows-2022

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # avoid shallow clone so nbgv can do its work.
    - name: ⚙ Install prerequisites
      run: |
        ./init.ps1 -UpgradePrerequisites
        dotnet --info

        # Print mono version if it is present.
        if (Get-Command mono -ErrorAction SilentlyContinue) {
          mono --version
        }
      shell: pwsh
    - name: ⚙️ Set pipeline variables based on source
      run: azure-pipelines/variables/_pipelines.ps1
      shell: pwsh
    - name: 🛠 build
      run: dotnet build -t:build,pack --no-restore -c ${{ env.BUILDCONFIGURATION }} -warnAsError -warnNotAsError:NU1901,NU1902,NU1903,NU1904 /bl:"${{ runner.temp }}/_artifacts/build_logs/build.binlog"
    - name: 🧪 test
      run: azure-pipelines/dotnet-test-cloud.ps1 -Configuration ${{ env.BUILDCONFIGURATION }} -Agent ${{ runner.os }}
      shell: pwsh
    - name: 💅🏻 Verify formatted code
      run: dotnet format --verify-no-changes --no-restore
      shell: pwsh
      if: runner.os == 'Linux'
    - name: 📚 Verify docfx build
      run: dotnet docfx docfx/docfx.json --warningsAsErrors --disableGitFeatures
      if: runner.os == 'Linux'
    - name: ⚙ Update pipeline variables based on build outputs
      run: azure-pipelines/variables/_pipelines.ps1
      shell: pwsh
    - name: 📢 Publish artifacts
      uses: ./.github/actions/publish-artifacts
      if: always()
    - name: 📢 Publish code coverage results to codecov.io
      run: ./azure-pipelines/publish-CodeCov.ps1 -CodeCovToken "${{ env.codecov_token }}" -PathToCodeCoverage "${{ runner.temp }}/_artifacts/coverageResults" -Name "${{ runner.os }} Coverage Results" -Flags "${{ runner.os }}"
      shell: pwsh
      timeout-minutes: 3
      continue-on-error: true
      if: env.codecov_token != ''
